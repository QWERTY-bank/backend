version: "3.5"

x-common: &common
  networks:
    - my-net
  environment:
    RUNTIME_ENVIRONMENT: "Docker"

services:
  bank.core.api:
    image: ${DOCKER_REGISTRY-}bankcoreapi
    build:
      context: .
      dockerfile: src/core/Bank.Core.Api/Dockerfile
    depends_on:
      - postgres
      - kafka
    <<: *common
    ports:
      - "5001:8080"

  bank.credits.api:
    image: ${DOCKER_REGISTRY-}bankcreditsapi
    build:
      context: .
      dockerfile: src/credits/Bank.Credits.Api/Dockerfile
    depends_on:
      - postgres
      - kafka
    <<: *common
    ports:
      - "5002:8080"

  bank.users.api:
    image: ${DOCKER_REGISTRY-}bankusersapi
    build:
      context: .
      dockerfile: src/users/Bank.Users.Api/Dockerfile
    depends_on:
      - postgres
      - redis
    <<: *common
    ports:
      - "5003:8080"

  bank.users.authweb:
    image: ${DOCKER_REGISTRY-}bankusersauthweb
    build:
      context: .
      dockerfile: src/users/Bank.Users.AuthWeb/Dockerfile
    depends_on:
      - postgres
      - redis
    <<: *common
    ports:
      - "5004:8080"

  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    volumes:
      - /var/lib/postgresql/data:/var/lib/postgresql/data
    networks:
      - my-net
    ports:
      - "5432:5432"

  redis:
    image: redis:latest
    restart: always
    networks:
      - my-net
    ports:
      - "6379:6379"
        
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_CLIENT_PORT: 2181
    tmpfs: "/datalog"
    networks:
      - my-net

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_LISTENERS: "CLIENT://:9092,EXTERNAL://:29092"
      KAFKA_ADVERTISED_LISTENERS: "CLIENT://kafka:9092,EXTERNAL://localhost:29092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: "CLIENT"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    networks:
      - my-net
    depends_on:
      - zookeeper

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - my-net
    depends_on:
      - kafka

  grafana:
    image: grafana/grafana-oss:10.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning/datasources/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafana-data:/var/lib/grafana
      # - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - tempo
    networks:
      - my-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - my-net

  tempo:
    image: grafana/tempo:2.2.3
    container_name: tempo
    hostname: tempo
    user: "1000"
    restart: "unless-stopped"
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - tempo-data:/var/tempo
    ports:
      - "4317:4317" # otlp grpc
    networks:
      - my-net

volumes:
  grafana-data:
    driver: local
  tempo-data:
    driver: local
  prometheus-data: 
    driver: local

networks:
  my-net:
    driver: bridge
